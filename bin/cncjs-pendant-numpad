#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
var options = {};

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncjs/cncrc.cfg file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    )
    .option(
        "--probeoffset <offset>",
        "offset (thickness) for Z probe",
        '1.56'
    )
    .option(
        "--vendorid <vendor>",
        "Vendor ID of USB HID device"
    )
    .option(
        "--productid <product>",
        "Product ID of USB HID device"
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
    vendorid: program.vendorid,
    productid: program.productid,
    probeoffset: program.probeoffset
};

if (options.list) {
    serialport.list().then((ports) => {
        ports.forEach(function(port) {
            console.log(port.path);
        });
    }).catch((err) =>{
        if (err) {
            console.error(err);
            process.exit(1);
        }
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

var kbdevent = {
    l_control: 0,
    l_shift: 0,
    l_alt: 0,
    l_meta: 0,
    r_control: 0,
    r_shift: 0,
    r_alt: 0,
    r_meta: 0,
    key: 0, // Normal keys
    extra: 0, // Advanced Keys or Special Keys
    repeating: 0, // If it is repating a movement
    move: 1, // Actually move size
    default_move: 1,
    jog_feed_rate: 1000,
};

var createServer = function(options) {
    serverMain(options, function(err, socket) {
        // Grbl
        socket.on("Grbl:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            store.sender.status = data;
        });

        console.log("Keyboard VID:PID is ", options.vendorId, options.productId);
        const findPath = interface =>
            hid
                .devices()
                .find(
                    item =>
                        item.vendorId === options.vendorId &&
                        item.productId === options.productId &&
                        item.interface === interface
                ).path;

        console.log("Keyboard HID Address:", findPath(0));


        var keyboard_main = new hid.HID(findPath(0));

        keyboard_main.on("data", function(data) {
            var recv = data.toJSON().data;
            var bits = recv.shift();
            kbdevent.l_control = (bits & 1) !== 0;
            kbdevent.l_shift = (bits & 2) !== 0;
            kbdevent.l_alt = (bits & 4) !== 0;
            kbdevent.l_meta = (bits & 8) !== 0;
            kbdevent.r_control = (bits & 16) !== 0;
            kbdevent.r_shift = (bits & 32) !== 0;
            kbdevent.r_alt = (bits & 64) !== 0;
            kbdevent.r_meta = (bits & 128) !== 0;
            recv.shift();
            kbdevent.key = recv.shift();
            sendToController();
        });

        function sendToController() {

            // For key codes, see sect. 10 (pg. 82) of USB HID Usage Tables:
            // https://usb.org/sites/default/files/hut1_22.pdf

            // Calculate move size modifiers
            kbdevent.move = kbdevent.default_move;

            // ignore "no key pressed" events.
            if (kbdevent.key == 0) {
                return;
            }

            // Ignore numlock on/off events. We listen for both of the relevant
            // codes for each key (e.g. LEFT + FOUR) below, so these are noise.
            if (kbdevent.key == 0x53) {
                return;
            }

            console.log("key: 0x", kbdevent.key.toString(16));
            switch (kbdevent.key) {

                // CHANGE JOG SPEED

                case 0x54: // Keypad /
                    kbdevent.default_move = 0.1;
                    break;
                case 0x55: // Keypad *
                    kbdevent.default_move = 1;
                    break;
                case 0x2A: // Keyboard DELETE (Backspace)
                    kbdevent.default_move = 10;
                    break;

                // JOG X/Y/Z
                // TODO: CNCjs queues these up while in HOLD state, which isn't
                //       great once one hits CYCLE START and things start moving
                //       around. Check the state and only send these in IDLE
                //       state (or maybe just not HOLD state).

                case 0x5C: // Keypad 4 and Left Arrow
                case 0x50: // Keyboard LeftArrow
                    socket.emit("write", options.port, "$J=G91 G21 X-" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                case 0x4F: // Keyboard RightArrow
                case 0x5E: // Keypad 6 and Right Arrow
                    socket.emit("write", options.port, "$J=G91 G21 X" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                case 0x51: // Keyboard DownArrow
                case 0x5A: // Keypad 2 and Down Arrow
                    socket.emit("write", options.port, "$J=G91 G21 Y-" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                case 0x52: // Keyboard UpArrow
                case 0x60: // Keypad 8 and Up Arrow
                    socket.emit("write", options.port, "$J=G91 G21 Y" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                case 0x57: // Keypad +
                    socket.emit("write", options.port, "$J=G91 G21 Z-" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                case 0x56: // Keypad -
                    socket.emit("write", options.port, "$J=G91 G21 Z" + kbdevent.move + " F" + kbdevent.jog_feed_rate + ";\n");
                    break;

                // FEED HOLD

                case 0x49: // Keyboard Insert
                case 0x62: // Keypad 0 and Insert
                    socket.emit("write", options.port, "!\n");
                    break;

                // CYCLE START

                case 0x63: // Keypad . and Delete
                case 0x4C: // Keyboard Delete Forward
                    socket.emit("write", options.port, "~\n");
                    break;

                default:
                    break;
            }
        }
    });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
    createServer(options);
    return;
}

serialport.list().then((ports) => {
    const choices = ports.map(function(port) {
        return port.path;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
}).catch((err) =>{
    if (err) {
        console.error(err);
        process.exit(1);
    }
});
